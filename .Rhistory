geom_text(aes(label = round(Distance, 2)), size = 2.5)
ggplot(dist_long, aes(x = Pop1, y = Pop2, fill = Distance)) +
geom_tile(color = "white") +
scale_fill_gradientn(
colours = c("#2166ac","#9db5ea","#ffc14d"),
na.value = "white",
name = "Distance"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank()
) +
labs(title = expression("Genetic distance among "*italic("Campanula thyrsoides")*" populations")) +
geom_text(aes(label = round(Distance, 2)), size = 2.5)
ggplot(dist_long, aes(x = Pop1, y = Pop2, fill = Distance)) +
geom_tile(color = "white") +
scale_fill_gradientn(
colours = c("#ffc14d", "#9db5ea", "#2166ac"),
na.value = "white",
name = "Distance"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank()
) +
labs(title = expression("Genetic distance among "*italic("Campanula thyrsoides")*" populations")) +
geom_text(aes(label = round(Distance, 2)), size = 2.5)
ggplot(dist_long, aes(x = Pop1, y = Pop2, fill = Distance)) +
geom_tile(color = "white") +
scale_fill_gradientn(
colours = c("#ffc14d", "#9db5ea", "#2166ac"),
na.value = "white",
name = "Distance"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)  # ← centra il titolo
) +
labs(title = expression("Genetic distance among "*italic("Campanula thyrsoides")*" populations")) +
geom_text(aes(label = round(Distance, 2)), size = 2.5)
ggplot(dist_long, aes(x = Pop1, y = Pop2, fill = Distance)) +
geom_tile(color = "white") +
scale_fill_gradientn(
colours = c("#ffc14d", "#9db5ea", "#2166ac"),
na.value = "white",
name = "Distance"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)  # ← centra il titolo
) +
labs(title = expression("Genetic distance among "*italic("Campanula thyrsoides")*" populations")) +
geom_text(aes(label = round(Distance, 2)), size = 4)
setwd("C:/Users/flavi/Desktop/Tirocinio/Master-thesis")
install.packages("readxl")  # Solo la prima volta
library(readxl)
################################## Palette #####################################
palette <- c("#f73831","#ea786e", "#ffc14d","#FF0099","#e58bb7","#8450ff","#75267d","#9db5ea", "#6bc3d3","#e0ff4d","#9db336")
# Color for each population
pop_colors <- palette
names(pop_colors) <- c("ALP","CTT","LPASS","MAU","PDR","PPURA","RT","SNEV","SP","STE", "CAN")
################################################################################
dati <- read_excel("conteggio_reads.xlsx")
View(dati)
# Boxplot
ggplot(dati, aes(x = pop, y = Coverage, fill = pop)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = pop_colors) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)  # ← centra il titolo
) +
labs(title = expression("(Mean) Coverage of individual,grouped by population, in "*italic("Campanula thyrsoides")),
x = "Population",
y = "Mean coverage",
fill = "Population")
library(dplyr)
library(tidyr)
# Prima togliamo le righe con NA nei passaggi importanti
reads_clean <- reads_df %>%
filter(!is.na(`Reads_in_denovo`))
# Prima togliamo le righe con NA nei passaggi importanti
reads_clean <- dati %>%
filter(!is.na(`Reads_in_denovo`))
# Calcolo percentuali di perdita per ogni riga
reads_loss <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Demulti_quality_control - Paired_after_demulti) / Demulti_quality_control,
loss3 = 100 * (Paired_after_demulti - Fastp) / Paired_after_demulti,
loss4 = 100 * (Fastp - Filter) / Fastp,
loss5 = 100 * (Filter - Paired_after_filter) / Filter,
loss6 = 100 * (Paired_after_filter - Reads_in_denovo) / Paired_after_filter
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5, loss6)
# Riorganizza in formato lungo
reads_long <- reads_loss %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
View(reads_long)
library(ggplot2)
ggplot(reads_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(
title = "Percentuale di reads perse ad ogni passaggio",
x = "Step",
y = "Percentuale di perdita (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(reads_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
labs(
title = "Percentuale media di reads perse ad ogni passaggio per popolazione",
x = "Step",
y = "Percentuale di perdita (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtra righe senza NA nei passaggi chiave
reads_clean <- dati %>%
filter(!is.na(`Reads_in_denovo`))
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Raw - Paired_after_demulti) / Raw,
loss3 = 100 * (Raw - Fastp) / Raw,
loss4 = 100 * (Raw - Filter) / Raw,
loss5 = 100 * (Raw - Paired_after_filter) / Raw,
loss6 = 100 * (Raw - Reads_in_denovo) / Raw
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5, loss6)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(
title = "Percentuale cumulativa di reads perse rispetto alle reads iniziali",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtra righe senza NA nei passaggi chiave
reads_clean <- dati %>%
filter(!is.na(`Reads_in_denovo`))
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Raw - Paired_after_demulti) / Raw,
loss3 = 100 * (Raw - Fastp) / Raw,
loss4 = 100 * (Raw - Filter) / Raw,
loss5 = 100 * (Raw - Paired_after_filter) / Raw,
loss6 = 100 * (Raw - Reads_in_denovo) / Raw
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5, loss6)
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
loss3 = 100 * (Paired_after_demulti - Fastp) / Raw,
loss4 = 100 * (Fastp - Filter) / Raw,
loss5 = 100 * (Filter - Paired_after_filter) / Raw,
loss6 = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5, loss6)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(
title = "Percentuale cumulativa di reads perse rispetto alle reads iniziali",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
labs(
title = "Percentuale media cumulativa di reads perse rispetto alle reads iniziali per popolazione",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale cumulativa di reads perse rispetto alle reads iniziali",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale media cumulativa di reads perse rispetto alle reads iniziali per popolazione",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
loss3 = 100 * (Paired_after_demulti - Fastp) / Raw,
loss4 = 100 * (Fastp - Filter) / Raw,
loss5 = 100 * (Filter - Paired_after_filter) / Raw,
loss6 = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5, loss6)
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
loss1 = 100 * (Raw - Demulti_quality_control) / Raw,
loss2 = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
loss3 = 100 * (Paired_after_demulti - Fastp) / Raw,
loss4 = 100 * (Fastp - Filter) / Raw,
loss5 = 100 * (Filter - Paired_after_filter) / Raw
) %>%
select(pop, loss1, loss2, loss3, loss4, loss5)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale media cumulativa di reads perse rispetto alle reads iniziali per popolazione",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
Demulti_paired = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
Cleaning = 100 * (Paired_after_demulti - Fastp) / Raw,
Filtering = 100 * (Fastp - Filter) / Raw,
Filtering_paired = 100 * (Filter - Paired_after_filter) / Raw,
Used_in_denovo = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired, Used_in_denovo)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale cumulativa di reads perse rispetto alle reads iniziali",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_cumulative_lon
reads_cumulative_long
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
Demulti_paired = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
Cleaning = 100 * (Paired_after_demulti - Fastp) / Raw,
Filtering = 100 * (Fastp - Filter) / Raw,
Filtering_paired = 100 * (Filter - Paired_after_filter) / Raw,
Used_in_denovo = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired, Used_in_denovo)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("loss"), names_to = "step", values_to = "percent_loss")
steps <- c("Demulti_QC", "Demulti_paired", "Cleaning","Filtering", "Filtering_paired", "Used_in_denovo")
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = steps, names_to = "step", values_to = "percent_loss")
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
iDemulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
iDemulti_paired = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
iCleaning = 100 * (Paired_after_demulti - Fastp) / Raw,
iFiltering = 100 * (Fastp - Filter) / Raw,
iFiltering_paired = 100 * (Filter - Paired_after_filter) / Raw,
iUsed_in_denovo = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, iDemulti_QC, iDemulti_paired, iCleaning, iFiltering, iFiltering_paired, iUsed_in_denovo)
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("i"), names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale cumulativa di reads perse rispetto alle reads iniziali",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("_"), names_to = "step", values_to = "percent_loss")
# Riorganizza in formato lungo
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = starts_with("_"), names_to = "step", values_to = "percent_loss")
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
_Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
_Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
Demulti_paired = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
Cleaning = 100 * (Paired_after_demulti - Fastp) / Raw,
Filtering = 100 * (Fastp - Filter) / Raw,
Filtering_paired = 100 * (Filter - Paired_after_filter) / Raw,
Used_in_denovo = 100 * (Paired_after_filter - Reads_in_denovo) / Raw
) %>%
select(pop, Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired, Used_in_denovo)
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = -pop, names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentage of lost reads (compared to raw reads)",
x = "Step",
y = "Percentage of lost reads (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = c(Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired, Used_in_denovo), names_to = "step", values_to = "percent_loss")
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentage of lost reads (compared to raw reads)",
x = "Step",
y = "Percentage of lost reads (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_cumulative_long$step <- factor(
reads_cumulative_long$step,
levels = c(
"Demulti_QC",
"Demulti_paired",
"Cleaning",
"Filtering",
"Filtering_paired",
"Used_in_denovo"
)
)
# Barplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, fill = pop)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentage of lost reads (compared to raw reads)",
x = "Step",
y = "Percentage of lost reads (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcola perdita cumulativa rispetto a Raw
reads_cumulative <- reads_clean %>%
mutate(
Demulti_QC = 100 * (Raw - Demulti_quality_control) / Raw,
Demulti_paired = 100 * (Demulti_quality_control - Paired_after_demulti) / Raw,
Cleaning = 100 * (Paired_after_demulti - Fastp) / Raw,
Filtering = 100 * (Fastp - Filter) / Raw,
Filtering_paired = 100 * (Filter - Paired_after_filter) / Raw
) %>%
select(pop, Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired)
reads_cumulative_long <- reads_cumulative %>%
pivot_longer(cols = c(Demulti_QC, Demulti_paired, Cleaning, Filtering, Filtering_paired), names_to = "step", values_to = "percent_loss")
reads_cumulative_long$step <- factor(
reads_cumulative_long$step,
levels = c(
"Demulti_QC",
"Demulti_paired",
"Cleaning",
"Filtering",
"Filtering_paired"
)
)
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale media cumulativa di reads perse rispetto alle reads iniziali per popolazione",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_labels <- reads_cumulative_long %>%
group_by(step) %>%
summarise(
percent_loss = max(percent_loss, na.rm = TRUE),
pop = pop[which.max(percent_loss)]
)
top_labels
reads_cumulative_long %>%
group_by(step)
riassunto <- reads_cumulative_long %>%
group_by(step)
View(riassunto)
top_labels
top_labels <- reads_cumulative_long %>%
group_by(step, pop) %>%
summarise(mean_loss = mean(percent_loss, na.rm = TRUE), .groups = "drop") %>%
group_by(step) %>%
filter(mean_loss == max(mean_loss)) %>%
ungroup()
top_labels
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentuale media cumulativa di reads perse rispetto alle reads iniziali per popolazione",
x = "Step",
y = "Percentuale di perdita cumulativa (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_text(
data = top_labels,
aes(x = step, y = mean_loss, label = pop),
vjust = -0.5,
color = "black",
size = 3
)
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_fill_manual(values = pop_colors) +
labs(
title = "Percentage of lost reads (compared to raw reads)",
x = "Step",
y = "Percentage of lost reads (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_text(
data = top_labels,
aes(x = step, y = mean_loss, label = pop),
vjust = -0.5,
color = "black",
size = 3
)
# Lineplot
ggplot(reads_cumulative_long, aes(x = step, y = percent_loss, color = pop, group = pop)) +
stat_summary(fun = mean, geom = "line") +
stat_summary(fun = mean, geom = "point") +
scale_color_manual(values = pop_colors) +
labs(
title = "Percentage of lost reads (compared to raw reads)",
x = "Step",
y = "Percentage of lost reads (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_text(
data = top_labels,
aes(x = step, y = mean_loss, label = pop),
vjust = -0.5,
color = "black",
size = 3
)
